(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{166:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(1),r=a(9),b=(a(0),a(195)),i={lip:1,title:"Off-chain API",author:"Kevin Hurley (@kphfb), Dmitry Pimenov, George Danezis",status:"draft",type:"informational",created:"05/29/2020"},c={id:"lip-1",title:"Off-chain API",description:"# Summary",source:"@site/all-docs__GENERATED/lip-1.md",permalink:"/lip-1",editUrl:"https://github.com/libra/lip/edit/master/all-docs__GENERATED/lip-1.md"},l=[{value:"Basic Protocol Interaction",id:"basic-protocol-interaction",children:[]},{value:"Request/Response Payload",id:"requestresponse-payload",children:[{value:"CommandRequestObject",id:"commandrequestobject",children:[]},{value:"CommandResponseObject",id:"commandresponseobject",children:[]},{value:"OffChainErrorObject",id:"offchainerrorobject",children:[]}]},{value:"Object Versioning",id:"object-versioning",children:[]},{value:"Protocol Server and Client Roles",id:"protocol-server-and-client-roles",children:[]},{value:"Request/Response Payload",id:"requestresponse-payload-1",children:[{value:"CommandRequestObject",id:"commandrequestobject-1",children:[]},{value:"PaymentCommand object",id:"paymentcommand-object",children:[]},{value:"PaymentObject",id:"paymentobject",children:[]},{value:"PaymentActorObject",id:"paymentactorobject",children:[]},{value:"KYCDataObject",id:"kycdataobject",children:[]},{value:"AddressObject",id:"addressobject",children:[]},{value:"NationalIdObject",id:"nationalidobject",children:[]},{value:"PaymentActionObject",id:"paymentactionobject",children:[]},{value:"StatusObject",id:"statusobject",children:[]},{value:"StatusEnum",id:"statusenum",children:[]}]}],o={rightToc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"summary"},"Summary"),Object(b.b)("hr",null),Object(b.b)("p",null,"The Off-Chain protocol is an API and payload specification to support compliance, privacy and scalability on blockchains."),Object(b.b)("hr",null),Object(b.b)("h1",{id:"abstract--motivation"},"Abstract / Motivation"),Object(b.b)("hr",null),Object(b.b)("p",null,"The Off-Chain protocol is an API and payload specification to support compliance, privacy and scalability on blockchains.\nIt is executed between pairs of ",Object(b.b)("em",{parentName:"p"},"Virtual Asset Service Providers")," (VASPs),\nsuch as wallets, exchanges or designated dealers and allows them to privately exchange payment information\nbefore, while, or after settling it on a Blockchain."),Object(b.b)("p",null,"The initial use-case for the Off-Chain protocol relates to ",Object(b.b)("em",{parentName:"p"},"supporting compliance"),", and in particular the implementation of the ",Object(b.b)("em",{parentName:"p"},"Travel Rule")," recommendation by the FATF. Those recommendations specify that when money transfers above a certain amount are executed by VASPs, some information about the sender and recipient of funds must become available to both VASPs. The Off-Chain protocols allows VASPs to exchange this information privately."),Object(b.b)("p",null,"A secondary use-case for the Off-Chain protocol is to provide higher levels of privacy than those that can be achieved directly on a Blockchain. The exact details of the customer accounts involved in a payment, as well as any personal information that needs to be exchanged to support compliance, remain off-chain. They are exchanged within a secure, authenticated and encrypted, channel and only made available to the parties that strictly require them."),Object(b.b)("p",null,"In the future, the Off-Chain protocol will be further extended to include functionality such as batching of transactions and additional payments functionality."),Object(b.b)("hr",null),Object(b.b)("h1",{id:"specification"},"Specification"),Object(b.b)("hr",null),Object(b.b)("h1",{id:"off-chain-protocal-design-principles"},"Off-Chain Protocal Design Principles"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Scalability"),". In the initial version of the Off-chain protocol all off-chain PaymentObjects that are ready for settlement, are then settled individually (gross) through a separate Blockchain transaction. However, the architecture of the Off-chain protocol allows in the future the introduction of netting batches of transactions, and settling all of them through a single Blockchain transaction. This allows costs associated with multiple on-chain transactions to be kept low for VASPs, and allows for a number of user transactions or payment between VASPs that exceed the capacity of the underlying Blockchain. Additionally, batches enhance privacy via hiding the number of transactions between VASPs and by only placing a single on-chain transaction which hides the individual transaction amounts."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Extensibility"),". The current Off-Chain protocols accommodate simple payments where a customer of a VASP sends funds to the customer of another VASP over a limit, requiring some additional compliance-related information. However, in the future the blockchains may support more complex flows of funds between customers of VASPs as well as merchants. The Off-chain protocol can be augmented to support the transfer of rich meta-data relating to those flows between VASPs in a compliant, secure, private, scalable and extensible manner."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Generic Communication Framework"),". The Off-Chain protocol is designed as a generic communication framework which can be utilized by any Blockchain and requires no ties to any specific blockchain. While the first usage of the Off-Chain protocol is within the Libra Blockchain, the Off-Chain protocol makes few and well defined assumptions about the underlying Blockchain environment, which can be fulfilled by other Blockchains. The Off-chain protocol can therefore be re-purposed to support compliance, privacy and scalability use-cases between VASPs in other Blockchains, as well as in multiple blockchains simultaneously."),Object(b.b)("p",null,"We describe a number of additional lower-level requirements throughout the remaining of the documents, such as ease of deployment through the use of established web technologies (like HTTP and JSON), tolerance to delays and crash-recovery failures of either VASPs, and compatibility with common cryptography and serialization schemes."),Object(b.b)("h1",{id:"basic-off-chain-building-blocks"},"Basic Off-Chain Building Blocks"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},"HTTP end-points"),": Each VASP exposes an HTTPS POST end point at\n",Object(b.b)("inlineCode",{parentName:"li"},"https://hostname:port/<protocol_version>/<localVASPAddress>/<RemoteVASPAddress>/command"),". It receives ",Object(b.b)("inlineCode",{parentName:"li"},"CommandRequestObject"),"s in the POST body, and responds with ",Object(b.b)("inlineCode",{parentName:"li"},"CommandResponseObject"),"s in the HTTP response (See ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"travel_rule_data_exchange.md"}),"Travel Rule Data Exchange")," for more details. Single command requests-responses are supported (HTTP1.0) but also pipelined request-responses are supported (HTTP1.1). The version for the Off-chain protocol is the string ",Object(b.b)("inlineCode",{parentName:"li"},"v1"),". All HTTP requests and responses contain a header ",Object(b.b)("inlineCode",{parentName:"li"},"X-Request-ID")," with a unique ID for the request, used for tracking requests and debugging. Responses must have the same string in the ",Object(b.b)("inlineCode",{parentName:"li"},"X-Request-ID")," header value as the requests they correspond to."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},"Serialization to JSON"),": All structures transmitted, nested within ",Object(b.b)("inlineCode",{parentName:"li"},"CommandRequestObject")," and ",Object(b.b)("inlineCode",{parentName:"li"},"CommandResponseObject")," are valid JSON serialized objects and can be parsed and serialized using standard JSON libraries. The content type for requests and responses is set to ",Object(b.b)("inlineCode",{parentName:"li"},"Content-type: application/json; charset=utf-8")," indicating all content is JSON encoded."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("strong",{parentName:"li"},"JWS Signatures"),": all transmitted requests/responses are signed by the sending party using the JWS Signature standard (with the Ed25519 / EdDSA ciphersuite, and ",Object(b.b)("inlineCode",{parentName:"li"},"compact")," encoding).  The party's compliance key shall be used to sign these messages. This ensures all information and meta-data about payments is authenticated and cannot be repudiated.")),Object(b.b)("h3",{id:"basic-protocol-interaction"},"Basic Protocol Interaction"),Object(b.b)("p",null,"The basic protocol interaction consists of:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"An initiating VASP creates a ",Object(b.b)("inlineCode",{parentName:"li"},"CommandRequestObject")," containing a PaymentCommand, and sends it to the other VASP, in the body of an HTTP POST."),Object(b.b)("li",{parentName:"ul"},"The responding VASP listens for requests, and when received, processes them to generate and send ",Object(b.b)("inlineCode",{parentName:"li"},"CommandResponseObject")," responses, with a success or failure status, through the HTTP response body."),Object(b.b)("li",{parentName:"ul"},"The initiating VASP receives the response and processes it to assess whether it was successful or not.")),Object(b.b)("p",null,"All objects contained within a command - for example ",Object(b.b)("inlineCode",{parentName:"p"},"PaymentObject"),', are considered as "shared objects" - meaning that either VASP may create a new command to modify the object, and will do so during the typical life-cycle of an object - an example being the addition of KYC data from both VASPs to a payment object. Both VASPs in a channel can asynchronously attempt to initiate and execute commands on shared objects. '),Object(b.b)("p",null,"As a reminder, all ",Object(b.b)("inlineCode",{parentName:"p"},"CommandRequestObject")," and ",Object(b.b)("inlineCode",{parentName:"p"},"CommandResponseObject")," objects sent are signed using JWS Signatures, using EdDSA and compact encoding. Recipients must verify the signatures when receiving any objects."),Object(b.b)("h2",{id:"requestresponse-payload"},"Request/Response Payload"),Object(b.b)("p",null,"All requests between VASPs are structured as ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#commandrequestobject"}),Object(b.b)("inlineCode",{parentName:"a"},"CommandRequestObject"),"s")," and all responses are structured as ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#commandresponseobject"}),Object(b.b)("inlineCode",{parentName:"a"},"CommandResponseObject"),"s"),".  The resulting request takes a form of the following:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandRequestObject",\n    "command_type": "PaymentCommand", // Command type\n    "command": CommandObject(), // Object of type as specified by command_type\n}\n')),Object(b.b)("p",null,"A response would look like the following:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandResponseObject",\n    "status": "success",\n}\n')),Object(b.b)("h3",{id:"commandrequestobject"},"CommandRequestObject"),Object(b.b)("p",null,"All requests between VASPs are structured as ",Object(b.b)("inlineCode",{parentName:"p"},"CommandRequestObject"),"s. "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_ObjectType"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Fixed value: ",Object(b.b)("inlineCode",{parentName:"td"},"CommandRequestObject"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"command_type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A string representing the type of command contained in the request.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"command"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Command object"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The command to sequence.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandRequestObject",\n    "command_type": CommandType,\n    "command": CommandObject(),\n}\n')),Object(b.b)("h3",{id:"commandresponseobject"},"CommandResponseObject"),Object(b.b)("p",null,"All responses to a CommandRequestObject are in the form of a CommandResponseObject"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_ObjectType"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The fixed string ",Object(b.b)("inlineCode",{parentName:"td"},"CommandResponseObject"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"status"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Either ",Object(b.b)("inlineCode",{parentName:"td"},"success")," or ",Object(b.b)("inlineCode",{parentName:"td"},"failure"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"error"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"List of ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#offchainerrorobject"}),"OffChainErrorObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Details on errors when status == "failure"')))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandResponseObject",\n    "error": [OffChainErrorObject()],\n    "status": "failure"\n}\n')),Object(b.b)("p",null,"When the ",Object(b.b)("inlineCode",{parentName:"p"},"CommandResponseObject")," status field is ",Object(b.b)("inlineCode",{parentName:"p"},"failure"),", the ",Object(b.b)("inlineCode",{parentName:"p"},"error")," field is included in the response to indicate the nature of the failure. The ",Object(b.b)("inlineCode",{parentName:"p"},"error")," field (type ",Object(b.b)("inlineCode",{parentName:"p"},"OffChainError"),") is a list of OffChainError objects. "),Object(b.b)("h3",{id:"offchainerrorobject"},"OffChainErrorObject"),Object(b.b)("p",null,"Represents an error that occurred in response to a command."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str (enum)"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'Either "command_error" or "protocol_error"')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"field"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The field on which this error occurred")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"code"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str (enum)"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The error code of the corresponding error")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"message"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Additional details about this error")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "type": "command_error",\n    "field": "0.sender.kyc_data.surname",\n    "code": "missing_data",\n    "message": "",\n}\n')),Object(b.b)("h1",{id:"command-sequencing"},"Command Sequencing"),Object(b.b)("p",null,"The low-level Off-Chain protocol allows two VASPs to sequence request-responses for commands originating from either VASP, in order to maintain a consistent database of shared objects. Sequencing a command requires both VAPSs to confirm it is valid, as well as its sequence in relation to other commands operating upon the same objects.  Since commands may operate upon multiple objects, a command only succeeds if the command is able to be applied to every dependent object - ensuring atomicity of the command and consistency of the objects. Both VASPs in a channel can asynchronously attempt to initiate and execute commands on shared objects. All commands upon shared objects which are exchanged between pairs of VASPs are sequenced relative to the prior state of each shared object in the command."),Object(b.b)("h2",{id:"object-versioning"},"Object Versioning"),Object(b.b)("p",null,"When either VASP creates a request, they assign a ",Object(b.b)("inlineCode",{parentName:"p"},"_creates_version")," to the object being created or mutated.  This string must be a unique random string between this pair of VASPs and is used to represent the version of the item created. These should be at least 16 bytes long and encoded to string in hexadecimal notation using characters in the range","[A-Za-z0-9]",".  Upon every mutation of an object, this string must be updated to a new unique value."),Object(b.b)("p",null,"To maintain relative ordering of commands on objects, every creation or mutation of an object must also specify the ",Object(b.b)("inlineCode",{parentName:"p"},"_dependencies"),".  The value(s) in this field must match a version previously specified by the ",Object(b.b)("inlineCode",{parentName:"p"},"_creates_versions")," parameter on a prior command and indicates the version(s) being mutated (or in the case of a new object being created which depends on no previous objects, the ",Object(b.b)("inlineCode",{parentName:"p"},"_dependencies")," list may be empty).  Each version may only be mutated a single time - because once it has been mutated, a new version is created to represent the latest state of the object. This results in what is essentially a per-object sequencing."),Object(b.b)("h2",{id:"protocol-server-and-client-roles"},"Protocol Server and Client Roles"),Object(b.b)("p",null,"In each channel, one VASP takes the role of a ",Object(b.b)("em",{parentName:"p"},"protocol server")," and the other the role of a ",Object(b.b)("em",{parentName:"p"},"protocol client")," for the purposes of simplifying shared object locking / state management. Note that these roles are distinct to the HTTP client/server -- and both VASPs act as an HTTP server and client to listen and respond to requests."),Object(b.b)("p",null,"Who is the protocol server and who is the client VASP is determined by comparing their binary on-chain Address strings (we call those the ",Object(b.b)("em",{parentName:"p"},"binary address"),". The following rules are used to determine which entity serves as which party: The last bit of VASP A\u2019s parent binary address ",Object(b.b)("em",{parentName:"p"},"w")," (where ",Object(b.b)("inlineCode",{parentName:"p"},"w = addr[15] & 0x1"),") is XOR\u2019d with the last bit in VASP B\u2019s parent binary address ",Object(b.b)("em",{parentName:"p"},"x"),".  This results in either 0 or 1.\nIf the result is 0, the lexicographically lower parent address is used as the server side.\nIf the result is 1, the lexicographically higher parent address is used as the server side. Lexicographic ordering determines which binary address is higher by comparing byte positions one by one, and returning the address with the first higher byte."),Object(b.b)("p",null,"To avoid excessive locking and intermediate state management during API requests, by convention the ",Object(b.b)("em",{parentName:"p"},"server")," acts as the source of truth for the state of an object.  In practice, this means that in the case of lock contention on a shared object, the ",Object(b.b)("em",{parentName:"p"},"server")," command is prioritized."),Object(b.b)("h1",{id:"travel-rule-data-exchange"},"Travel Rule Data Exchange"),Object(b.b)("p",null,"In the initial version of the off-chain APIs, the usage is intended as a means of transferring travel-rule information between VASPs.  The following will detail the request and response payloads utilized for this purpose."),Object(b.b)("h2",{id:"requestresponse-payload-1"},"Request/Response Payload"),Object(b.b)("p",null,"All requests between VASPs are structured as ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"basic_building_blocks.md#commandrequestobject"}),Object(b.b)("inlineCode",{parentName:"a"},"CommandRequestObject"),"s")," and all responses are structured as ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"basic_building_blocks.md#commandresponseobject"}),Object(b.b)("inlineCode",{parentName:"a"},"CommandResponseObject"),"s"),".  For a travel-rule data exchange, the resulting request takes a form of the following:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandRequestObject",\n    "command_type": "PaymentCommand",\n    "command": {\n        "_ObjectType": "PaymentCommand",\n        "_creates_versions": [\n            "08697804e12212fa1c979283963d5c71"\n        ],\n        "_dependencies": [],\n        "payment": {\n            "sender": {\n                "address": "lbr1pgfpyysjzgfpyysjzgfpyysjzgf3xycnzvf3xycsm957ne",\n                "kyc_data": {\n                    "payload_type": "KYC_DATA"\n                    "payload_version": 1,\n                    "type": "individual",\n                    "given_name": "ben",\n                    "surname": "maurer",\n                    "address": {\n                    "city": "Sunnyvale",\n                    "country": "US",\n                    "line1": "1234 Maple Street",\n                    "line2": "Apartment 123",\n                    "postal_code": "12345",\n                    "state": "California",\n                    },\n                    "dob": "1920-03-20",\n                    "place_of_birth": {\n                    "city": "Sunnyvale",\n                    "country": "US",\n                    "postal_code": "12345",\n                    "state": "California",\n                    }\n                },\n                    "status": {\n                        "status": "ready_for_settlement",\n                    }\n            },\n            "receiver": {\n                "address": "lbr1pgfpnegv9gfpyysjzgfpyysjzgf3xycnzvf3xycsmxycyy",\n            },\n            "reference_id": "lbr1qg9q5zs2pg9q5zs2pg9q5zs2pgy7gvd9u_ref1001",\n            "action": {\n                "amount": 100,\n                "currency": "USD",\n                "action": "charge",\n                "timestamp": 72322,\n            },\n            "description": "A free form or structured description of the payment.",\n        },\n    },\n}\n')),Object(b.b)("p",null,"A response would look like the following:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "CommandResponseObject",\n    "status": "success",\n}\n')),Object(b.b)("h3",{id:"commandrequestobject-1"},"CommandRequestObject"),Object(b.b)("p",null,"For a travel rule data exchange, the ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"basic_building_blocks.md#commandrequestobject"}),"command_type"),' field is set to "PaymentCommand".  The command object is a ',Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"#paymentcommand-object"}),Object(b.b)("inlineCode",{parentName:"a"},"PaymentCommand")," object"),"."),Object(b.b)("h3",{id:"paymentcommand-object"},"PaymentCommand object"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_ObjectType"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The fixed string ",Object(b.b)("inlineCode",{parentName:"td"},"PaymentCommand"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"payment"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#paymentobject"}),Object(b.b)("inlineCode",{parentName:"a"},"PaymentObject"))),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"contains a ",Object(b.b)("inlineCode",{parentName:"td"},"PaymentObject")," that either creates a new payment or updates an existing payment. Note that strict validity check apply when updating payments, that are listed in the section below describing these objects. An invalid update or initial payment object results in a command error")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_creates_versions"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Must be a list containing a single str representing the version of the new or updated ",Object(b.b)("inlineCode",{parentName:"td"},"PaymentObject")," resulting from the success of this payment command. A list with any other number of items results in a command error.  This string must be a unique random string between this pair of VASPs and is used to represent the version of the item created. These should be at least 16 bytes long and encoded to string in hexadecimal notation using characters in the range","[A-Za-z0-9]")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_dependencies"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Can be an empty list or a list containing a single previous version. If the list is empty this payment command defines a new payment. If the list contains one item, then this command updates the shared ",Object(b.b)("inlineCode",{parentName:"td"},"PaymentObject")," with the given version. It is an error to include more versions, and it results in a command error response.  The value in this field must match a version previously specified by the ",Object(b.b)("inlineCode",{parentName:"td"},"_creates_versions")," parameter on a prior command.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "_ObjectType": "PaymentCommand",\n    "_creates_versions": [\n        "08697804e12212fa1c979283963d5c71"\n    ],\n    "_dependencies": [],\n    "payment": {\n        PaymentObject(),\n    }\n}\n')),Object(b.b)("h3",{id:"paymentobject"},"PaymentObject"),Object(b.b)("p",null,"The structure in this object can be a full payment or just the fields of an existing payment object that need to be changed. Some fields are immutable after they are defined once (see below). Others can by updated multiple times. Updating immutable fields with a different value results in a command error, but it is acceptable to re-send the same value."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sender/receiver"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#paymentactorobject"}),Object(b.b)("inlineCode",{parentName:"a"},"PaymentActorObject"))),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Required for payment creation"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Information about the sender/receiver in this payment")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"reference_id"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique reference ID of this payment on the payment initiator VASP (the VASP which originally created this payment object). This value should be unique, and formatted as \u201c<creator",Object(b.b)("em",{parentName:"td"},"vasp_onchain_address_bech32>"),"<unique_id>\u201d.  For example, \u201dlbr1x23456abcd_seqABCD\u201c. This field is mandatory on payment creation and immutable after that.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"original_payment_reference_id"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Used for updates to a payment after it has been committed on chain. For example, used for refunds. The reference ID of the original payment will be placed into this field. This value is optional on payment creation and invalid on updates.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"recipient_signature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Signature of the recipient of this transaction. The signature is over the LCS serialized representation of ",Object(b.b)("inlineCode",{parentName:"td"},"reference_id"),", ",Object(b.b)("inlineCode",{parentName:"td"},"sender_address"),", ",Object(b.b)("inlineCode",{parentName:"td"},"amount")," and is signed with the compliance key of the recipient VASP.  This is used for on-chain attestation from the recipient party.  This may be omitted on blockchains which do not require on-chain attestation")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"action"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#paymentactionobject"}),Object(b.b)("inlineCode",{parentName:"a"},"PaymentActionObject"))),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of cryptocurrency + currency type (USD, LBR, EUR, BTC, etc.) + type of action to take. This field is mandatory and immutable")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"description"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Description of the payment. To be displayed to the user. Unicode utf-8 encoded max length of 255 characters. This field is optional but can only be written once.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "sender": payment_actor_object(),\n    "receiver": payment_actor_object(),\n    "reference_id": "lbr1qg9q5zs2pg9q5zs2pg9q5zs2pgy7gvd9u_ref1001",\n    "original_payment_reference_id": "lbr1qg9q5zs2pg9q5zs2pg9q5zs2pgy7gvd9u_ref0987",\n    "recipient_signature": "...",\n    "action": payment_action_object(),\n    "description": "A free form or structured description of the payment.",\n}\n')),Object(b.b)("h3",{id:"paymentactorobject"},"PaymentActorObject"),Object(b.b)("p",null,"A ",Object(b.b)("inlineCode",{parentName:"p"},"PaymentActorObject")," represents a participant in a payment - either sender or receiver. It also includes the status of the actor, indicates missing information or willingness to settle or abort the payment, and the Know-Your-Customer information of the customer involved in the payment."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Address of the sender/receiver account. Addresses may be single use or valid for a limited time, and therefore VASPs should not rely on them remaining stable across time or different VASP addresses. The addresses are encoded using bech32. The bech32 address encodes both the address of the VASP as well as the specific user's subaddress. They should be no longer than 80 characters. Mandatory and immutable. For Libra addresses, refer to (TODO) for format.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"kyc_data"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#kycdataobject"}),"KycDataObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The KYC data for this account. This field is optional but immutable once it is set.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"status"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#statusobject"}),"StatusObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Status of the payment from the perspective of this actor. This field can only be set by the respective sender/receiver VASP and represents the status on the sender/receiver VASP side. This field is mandatory by this respective actor (either sender or receiver side) and mutable.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"metadata"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Can be specified by the respective VASP to hold metadata that the sender/receiver VASP wishes to associate with this payment. This is a mandatory field but can be set to an empty list (i.e. ",Object(b.b)("inlineCode",{parentName:"td"},"[]"),"). New string-typed entries can be appended at the end of the list, but not deleted.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"metadata"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"list of str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Can be specified by the respective VASP to hold metadata that the sender/receiver VASP wishes to associate with this payment. This is a mandatory field but can be set to an empty list (i.e. ",Object(b.b)("inlineCode",{parentName:"td"},"[]"),"). New string-typed entries can be appended at the end of the list, but not deleted.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "address": "lbr1pgfpyysjzgfpyysjzgfpyysjzgf3xycnzvf3xycsm957ne",\n    "kyc_data": kyc_data_object(),\n    "status": status_object(),\n    "metadata": [],\n}\n')),Object(b.b)("h3",{id:"kycdataobject"},"KYCDataObject"),Object(b.b)("p",null,"A ",Object(b.b)("inlineCode",{parentName:"p"},"KYCDataObject")," represents the KYC data for a single subaddress.  Proof of non-repudiation is provided by the signatures included in the JWS payloads.  The only mandatory fields are ",Object(b.b)("inlineCode",{parentName:"p"},"payload_type"),", ",Object(b.b)("inlineCode",{parentName:"p"},"payload_version")," and ",Object(b.b)("inlineCode",{parentName:"p"},"type"),". All other fields are optional from the point of view of the protocol -- however they may need to be included for another VASP to be ready to settle the payment."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"payload_type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Used to help determine what type of data this will deserialize into.  Always set to KYC_DATA.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"payload_version"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Version identifier to allow modifications to KYC data object without needing to bump version of entire API set.  Set to 1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Required field, must be either \u201cindividual\u201d or \u201centity\u201d")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"given_name"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Legal given name of the user for which this KYC data object applies.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"surname"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Legal surname of the user for which this KYC data object applies.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#addressobject"}),"AddressObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Physical address data for this account")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"dob"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Date of birth for the holder of this account.  Specified as an ISO 8601 calendar date format: ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://en.wikipedia.org/wiki/ISO_8601"}),"https://en.wikipedia.org/wiki/ISO_8601"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"place_of_birth"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#addressobject"}),"AddressObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Place of birth for this user.  line1 and line2 fields should not be populated for this usage of the address object")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"national_id"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#nationalidobject"}),"NationalIdObject")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"National ID information for the holder of this account")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"legal_entity_name"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of the legal entity.  Used when subaddress represents a legal entity rather than an individual. KYCDataObject should only include one of legal_entity_name OR given_name/surname")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"additional_kyc_data"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Freeform KYC data.  If a soft-match occurs, this field should be used to specify additional KYC data which can be used to clear the soft-match.  It is suggested that this data be JSON, XML, or another human-readable form.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "payload_type": "KYC_DATA"\n    "payload_version": 1,\n    "type": "individual",\n    "given_name": "ben",\n    "surname": "maurer",\n    "address": {\n        AddressObject(),\n    },\n    "dob": "1920-03-20",\n    "place_of_birth": {\n        AddressObject(),\n    }\n    "national_id": {\n    },\n}\n')),Object(b.b)("h3",{id:"addressobject"},"AddressObject"),Object(b.b)("p",null,"Represents a physical address"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"city"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The city, district, suburb, town, or village")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"country"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Two-letter country code (",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"}),"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"),")")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line1"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Address line 1")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"line2"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Address line 2 - apartment, unit, etc.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"postal_code"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ZIP or postal code")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"state"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"State, county, province, region.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "city": "Sunnyvale",\n    "country": "US",\n    "line1": "1234 Maple Street",\n    "line2": "Apartment 123",\n    "postal_code": "12345",\n    "state": "California",\n}\n')),Object(b.b)("h3",{id:"nationalidobject"},"NationalIdObject"),Object(b.b)("p",null,"Represents a national ID."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"id_value"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Indicates the national ID value - for example, a social security number")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"country"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Two-letter country code (",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"}),"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"),")")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"type"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Indicates the type of the ID")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "id_value": "123-45-6789",\n    "country": "US",\n    "type": "SSN",\n}\n')),Object(b.b)("h3",{id:"paymentactionobject"},"PaymentActionObject"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"amount"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Amount of the transfer.  Base units are the same as for on-chain transactions for this currency.  For example, if LibraUSD is represented on-chain where \u201c1\u201d equals 1e-6 dollars, then \u201c1\u201d equals the same amount here.  For any currency, the on-chain mapping must be used for amounts.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"currency"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"One of the supported on-chain currency types - ex. LBR, BTC, USD, EUR, etc.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"action"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"enum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Populated in the request.  This value indicates the requested action to perform, and the only valid value is ",Object(b.b)("inlineCode",{parentName:"td"},"charge"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"timestamp"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unix timestamp indicating the time that the payment command was created.")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "amount": 100,\n    "currency": "USD",\n    "action": "charge",\n    "timestamp": 72322,\n}\n')),Object(b.b)("h3",{id:"statusobject"},"StatusObject"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Field"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required?"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"status"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str enum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Y"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Status of the payment from the perspective of this actor. This field can only be set by the respective sender/receiver VASP and represents the status on the sender/receiver VASP side. This field is mandatory by this respective actor (either sender or receiver side) and mutable. Valid values are specified in ",Object(b.b)("a",Object(n.a)({parentName:"td"},{href:"#statusenum"})," StatusEnum "))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abort_code"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str (enum)"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"In the case of an ",Object(b.b)("inlineCode",{parentName:"td"},"abort")," status, this field may be used to describe the reason for the abort. Represents the error code of the corresponding error")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abort_message"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"str"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"N"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Additional details about this error.  To be used only when ",Object(b.b)("inlineCode",{parentName:"td"},"code")," is populated")))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{}),'{\n    "status": "needs_kyc_data",\n}\n')),Object(b.b)("h3",{id:"statusenum"},"StatusEnum"),Object(b.b)("p",null,"Valid values are:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"none")," - No status is yet set from this actor."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"needs_kyc_data")," - KYC data about the subaddresses is required by this actor."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"needs_recipient_signature")," - Can only be associated with the sender actor.  Means that the sender still requires that the recipient VASP provide the signature so that the transaction can be put on-chain."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ready_for_settlement")," - Transaction is ready for settlement according to this actor (i.e. the required signatures/KYC data have been provided)"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"settled")," - Payment has been settled on chain and funds delivered to the subaddress"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"abort")," - Indicates the actor wishes to abort this payment, instead of settling it."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"pending_review")," - Payment is pending review."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"soft_match")," - Actor's KYC data resulted in a soft-match.  The VASP associated with this actor should send any available KYC information which may clear the soft-match via the KYCObject field of ",Object(b.b)("inlineCode",{parentName:"li"},"additional_kyc_data"),".  If not sent within SLA window, this transaction will be aborted.")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Valid Status Transitions"),". Each side of the transaction is only allowed to mutate their own status (sender or receiver), and upon payment creation may only set the status of the other party to ",Object(b.b)("inlineCode",{parentName:"p"},"none"),". Subsequently, each party may only modify their own state to a higher or equal state in the order ",Object(b.b)("inlineCode",{parentName:"p"},"none"),", (",Object(b.b)("inlineCode",{parentName:"p"},"needs_kyc_data"),", ",Object(b.b)("inlineCode",{parentName:"p"},"needs_recipient_signature"),", ",Object(b.b)("inlineCode",{parentName:"p"},"abort"),", ",Object(b.b)("inlineCode",{parentName:"p"},"pending_review"),"), (",Object(b.b)("inlineCode",{parentName:"p"},"soft_match"),", ",Object(b.b)("inlineCode",{parentName:"p"},"ready_for_settlement"),", ",Object(b.b)("inlineCode",{parentName:"p"},"abort"),"), and ",Object(b.b)("inlineCode",{parentName:"p"},"settled"),". A status of ",Object(b.b)("inlineCode",{parentName:"p"},"abort")," and ",Object(b.b)("inlineCode",{parentName:"p"},"settle")," is terminal and must not be changed. As a consequence of this ordering of valid status updates once a transaction is in a ",Object(b.b)("inlineCode",{parentName:"p"},"ready_for_settlement")," state by both parties it cannot be aborted any more and can be considered final from the point of view of the off-chain protocol. It is therefore safe for a VASP sending funds to initiate an On-Chain payment to settle an Off-chain payment after it observed the other party setting their status to ",Object(b.b)("inlineCode",{parentName:"p"},"ready_for_settlement")," and it is also willing to go past this state."),Object(b.b)("p",null,"A state of ",Object(b.b)("inlineCode",{parentName:"p"},"pending_review")," may exist due to manual review. This state may result in any of ",Object(b.b)("inlineCode",{parentName:"p"},"soft_match"),", ",Object(b.b)("inlineCode",{parentName:"p"},"ready_for_settlement"),", or ",Object(b.b)("inlineCode",{parentName:"p"},"abort"),"."),Object(b.b)("p",null,"A state of ",Object(b.b)("inlineCode",{parentName:"p"},"soft_match")," requires that the VASP associated with this actor must send all available KYC data via ",Object(b.b)("inlineCode",{parentName:"p"},"additional_kyc_data"),".  After human review of this data, this state may result in any of ",Object(b.b)("inlineCode",{parentName:"p"},"ready_for_settlement")," or ",Object(b.b)("inlineCode",{parentName:"p"},"abort")," (",Object(b.b)("inlineCode",{parentName:"p"},"abort")," if the soft-match was unable to be cleared).  If data is not received within a reasonable SLA (suggested to be 24 hours), this state will result in ",Object(b.b)("inlineCode",{parentName:"p"},"abort"),".  The party who needs to provide KYC data is also allowed to ",Object(b.b)("inlineCode",{parentName:"p"},"abort")," the transaction at any point if they do not have additional KYC data or do not wish to supply it."))}s.isMDXComponent=!0},195:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),s=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},d=function(e){var t=s(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),d=s(a),m=n,j=d["".concat(i,".").concat(m)]||d[m]||p[m]||b;return a?r.a.createElement(j,c({ref:t},o,{components:a})):r.a.createElement(j,c({ref:t},o))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,i=new Array(b);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var o=2;o<b;o++)i[o]=a[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);